{"ast":null,"code":"// NotificationService.ts\nimport { BehaviorSubject, Observable } from 'rxjs';\nclass NotificationService {\n  constructor() {\n    this.notificationsSubject = new BehaviorSubject([]);\n    this.unreadCountSubject = new BehaviorSubject(0);\n  }\n  send(notification) {\n    const currentNotifications = this.notificationsSubject.value;\n    this.notificationsSubject.next([...currentNotifications, notification]);\n    this.updateUnreadCount();\n  }\n  list() {\n    return this.notificationsSubject.asObservable();\n  }\n  unreadCount(userId) {\n    return new Observable(subscriber => {\n      const subscription = this.notificationsSubject.subscribe(notifications => {\n        const unreadCount = notifications.filter(n => !n.read && n.userId === userId).length;\n        subscriber.next(unreadCount);\n      });\n      return () => subscription.unsubscribe();\n    });\n  }\n  markAllAsRead(userId) {\n    const updatedNotifications = this.notificationsSubject.value.map(n => n.userId === userId ? {\n      ...n,\n      read: true\n    } : n);\n    this.notificationsSubject.next(updatedNotifications);\n    this.updateUnreadCount();\n  }\n  clearAll(userId) {\n    const remainingNotifications = this.notificationsSubject.value.filter(n => n.userId !== userId);\n    this.notificationsSubject.next(remainingNotifications);\n    this.updateUnreadCount();\n  }\n  updateUnreadCount() {\n    const unreadCount = this.notificationsSubject.value.filter(n => !n.read).length;\n    this.unreadCountSubject.next(unreadCount);\n  }\n}\nexport default new NotificationService();","map":{"version":3,"names":["BehaviorSubject","Observable","NotificationService","constructor","notificationsSubject","unreadCountSubject","send","notification","currentNotifications","value","next","updateUnreadCount","list","asObservable","unreadCount","userId","subscriber","subscription","subscribe","notifications","filter","n","read","length","unsubscribe","markAllAsRead","updatedNotifications","map","clearAll","remainingNotifications"],"sources":["C:/Users/Dawid.Migdal/Desktop/pawdebe/frontend/src/api/notificationService.ts"],"sourcesContent":["// NotificationService.ts\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\n\r\nexport type ISOString = string;\r\n\r\nexport type Notification = {\r\n  title: string;\r\n  message: string;\r\n  date: ISOString;\r\n  priority: 'low' | 'medium' | 'high';\r\n  read: boolean;\r\n  userId: string;  // Dodane pole userId\r\n};\r\n\r\nclass NotificationService {\r\n  private notificationsSubject = new BehaviorSubject<Notification[]>([]);\r\n  private unreadCountSubject = new BehaviorSubject<number>(0);\r\n\r\n  send(notification: Notification) {\r\n    const currentNotifications = this.notificationsSubject.value;\r\n    this.notificationsSubject.next([...currentNotifications, notification]);\r\n    this.updateUnreadCount();\r\n  }\r\n\r\n  list(): Observable<Notification[]> {\r\n    return this.notificationsSubject.asObservable();\r\n  }\r\n\r\n  unreadCount(userId: string): Observable<number> {\r\n    return new Observable<number>((subscriber) => {\r\n      const subscription = this.notificationsSubject.subscribe((notifications) => {\r\n        const unreadCount = notifications.filter(n => !n.read && n.userId === userId).length;\r\n        subscriber.next(unreadCount);\r\n      });\r\n      return () => subscription.unsubscribe();\r\n    });\r\n  }\r\n\r\n  markAllAsRead(userId: string) {\r\n    const updatedNotifications = this.notificationsSubject.value.map((n) =>\r\n      n.userId === userId ? { ...n, read: true } : n\r\n    );\r\n    this.notificationsSubject.next(updatedNotifications);\r\n    this.updateUnreadCount();\r\n  }\r\n\r\n  clearAll(userId: string) {\r\n    const remainingNotifications = this.notificationsSubject.value.filter(n => n.userId !== userId);\r\n    this.notificationsSubject.next(remainingNotifications);\r\n    this.updateUnreadCount();\r\n  }\r\n\r\n  private updateUnreadCount() {\r\n    const unreadCount = this.notificationsSubject.value.filter(n => !n.read).length;\r\n    this.unreadCountSubject.next(unreadCount);\r\n  }\r\n}\r\n\r\nexport default new NotificationService();\r\n"],"mappings":"AAAA;AACA,SAASA,eAAe,EAAEC,UAAU,QAAQ,MAAM;AAalD,MAAMC,mBAAmB,CAAC;EAAAC,YAAA;IAAA,KAChBC,oBAAoB,GAAG,IAAIJ,eAAe,CAAiB,EAAE,CAAC;IAAA,KAC9DK,kBAAkB,GAAG,IAAIL,eAAe,CAAS,CAAC,CAAC;EAAA;EAE3DM,IAAIA,CAACC,YAA0B,EAAE;IAC/B,MAAMC,oBAAoB,GAAG,IAAI,CAACJ,oBAAoB,CAACK,KAAK;IAC5D,IAAI,CAACL,oBAAoB,CAACM,IAAI,CAAC,CAAC,GAAGF,oBAAoB,EAAED,YAAY,CAAC,CAAC;IACvE,IAAI,CAACI,iBAAiB,CAAC,CAAC;EAC1B;EAEAC,IAAIA,CAAA,EAA+B;IACjC,OAAO,IAAI,CAACR,oBAAoB,CAACS,YAAY,CAAC,CAAC;EACjD;EAEAC,WAAWA,CAACC,MAAc,EAAsB;IAC9C,OAAO,IAAId,UAAU,CAAUe,UAAU,IAAK;MAC5C,MAAMC,YAAY,GAAG,IAAI,CAACb,oBAAoB,CAACc,SAAS,CAAEC,aAAa,IAAK;QAC1E,MAAML,WAAW,GAAGK,aAAa,CAACC,MAAM,CAACC,CAAC,IAAI,CAACA,CAAC,CAACC,IAAI,IAAID,CAAC,CAACN,MAAM,KAAKA,MAAM,CAAC,CAACQ,MAAM;QACpFP,UAAU,CAACN,IAAI,CAACI,WAAW,CAAC;MAC9B,CAAC,CAAC;MACF,OAAO,MAAMG,YAAY,CAACO,WAAW,CAAC,CAAC;IACzC,CAAC,CAAC;EACJ;EAEAC,aAAaA,CAACV,MAAc,EAAE;IAC5B,MAAMW,oBAAoB,GAAG,IAAI,CAACtB,oBAAoB,CAACK,KAAK,CAACkB,GAAG,CAAEN,CAAC,IACjEA,CAAC,CAACN,MAAM,KAAKA,MAAM,GAAG;MAAE,GAAGM,CAAC;MAAEC,IAAI,EAAE;IAAK,CAAC,GAAGD,CAC/C,CAAC;IACD,IAAI,CAACjB,oBAAoB,CAACM,IAAI,CAACgB,oBAAoB,CAAC;IACpD,IAAI,CAACf,iBAAiB,CAAC,CAAC;EAC1B;EAEAiB,QAAQA,CAACb,MAAc,EAAE;IACvB,MAAMc,sBAAsB,GAAG,IAAI,CAACzB,oBAAoB,CAACK,KAAK,CAACW,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACN,MAAM,KAAKA,MAAM,CAAC;IAC/F,IAAI,CAACX,oBAAoB,CAACM,IAAI,CAACmB,sBAAsB,CAAC;IACtD,IAAI,CAAClB,iBAAiB,CAAC,CAAC;EAC1B;EAEQA,iBAAiBA,CAAA,EAAG;IAC1B,MAAMG,WAAW,GAAG,IAAI,CAACV,oBAAoB,CAACK,KAAK,CAACW,MAAM,CAACC,CAAC,IAAI,CAACA,CAAC,CAACC,IAAI,CAAC,CAACC,MAAM;IAC/E,IAAI,CAAClB,kBAAkB,CAACK,IAAI,CAACI,WAAW,CAAC;EAC3C;AACF;AAEA,eAAe,IAAIZ,mBAAmB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}