{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nclass NotificationService {\n  constructor() {\n    this.notificationsSubject = new BehaviorSubject([]);\n    this.unreadCountSubject = new BehaviorSubject(0);\n  }\n  send(notification) {\n    const currentNotifications = this.notificationsSubject.value;\n    this.notificationsSubject.next([...currentNotifications, notification]);\n    this.updateUnreadCount();\n  }\n  sendBulk(notifications) {\n    const currentNotifications = this.notificationsSubject.value;\n    this.notificationsSubject.next([...currentNotifications, ...notifications]);\n    this.updateUnreadCount();\n  }\n  list() {\n    return this.notificationsSubject.asObservable();\n  }\n  unreadCount() {\n    return this.unreadCountSubject.asObservable();\n  }\n  markAllAsRead() {\n    const updatedNotifications = this.notificationsSubject.value.map(n => ({\n      ...n,\n      read: true\n    }));\n    this.notificationsSubject.next(updatedNotifications);\n    this.updateUnreadCount();\n  }\n  clearAll() {\n    this.notificationsSubject.next([]);\n    this.unreadCountSubject.next(0);\n  }\n  updateUnreadCount() {\n    const unreadCount = this.notificationsSubject.value.filter(n => !n.read).length;\n    this.unreadCountSubject.next(unreadCount);\n  }\n}\nexport default new NotificationService();","map":{"version":3,"names":["BehaviorSubject","NotificationService","constructor","notificationsSubject","unreadCountSubject","send","notification","currentNotifications","value","next","updateUnreadCount","sendBulk","notifications","list","asObservable","unreadCount","markAllAsRead","updatedNotifications","map","n","read","clearAll","filter","length"],"sources":["C:/Users/Dawid.Migdal/Desktop/pawdebe/frontend/src/api/notificationService.ts"],"sourcesContent":["import { BehaviorSubject, Observable } from 'rxjs';\r\n\r\nexport type ISOString = string;\r\n\r\nexport type Notification = {\r\n  title: string;\r\n  message: string;\r\n  date: ISOString;\r\n  priority: 'low' | 'medium' | 'high';\r\n  read: boolean;\r\n};\r\n\r\nexport type NotificationId = {\r\n  userId: string;\r\n  title: string;\r\n  message: string;\r\n  date: ISOString;\r\n  priority: 'low' | 'medium' | 'high';\r\n  read: boolean;\r\n};\r\n\r\n\r\nclass NotificationService {\r\n  private notificationsSubject = new BehaviorSubject<Notification[]>([]);\r\n  private unreadCountSubject = new BehaviorSubject<number>(0);\r\n\r\n  send(notification: Notification) {\r\n    const currentNotifications = this.notificationsSubject.value;\r\n    this.notificationsSubject.next([...currentNotifications, notification]);\r\n    this.updateUnreadCount();\r\n  }\r\n\r\n  sendBulk(notifications: Notification[]) {\r\n    const currentNotifications = this.notificationsSubject.value;\r\n    this.notificationsSubject.next([...currentNotifications, ...notifications]);\r\n    this.updateUnreadCount();\r\n  }\r\n\r\n  list(): Observable<Notification[]> {\r\n    return this.notificationsSubject.asObservable();\r\n  }\r\n\r\n  unreadCount(): Observable<number> {\r\n    return this.unreadCountSubject.asObservable();\r\n  }\r\n\r\n  markAllAsRead() {\r\n    const updatedNotifications = this.notificationsSubject.value.map((n) => ({ ...n, read: true }));\r\n    this.notificationsSubject.next(updatedNotifications);\r\n    this.updateUnreadCount();\r\n  }\r\n\r\n  clearAll() {\r\n    this.notificationsSubject.next([]);\r\n    this.unreadCountSubject.next(0);\r\n  }\r\n\r\n  private updateUnreadCount() {\r\n    const unreadCount = this.notificationsSubject.value.filter(n => !n.read).length;\r\n    this.unreadCountSubject.next(unreadCount);\r\n  }\r\n}\r\n\r\nexport default new NotificationService();\r\n"],"mappings":"AAAA,SAASA,eAAe,QAAoB,MAAM;AAsBlD,MAAMC,mBAAmB,CAAC;EAAAC,YAAA;IAAA,KAChBC,oBAAoB,GAAG,IAAIH,eAAe,CAAiB,EAAE,CAAC;IAAA,KAC9DI,kBAAkB,GAAG,IAAIJ,eAAe,CAAS,CAAC,CAAC;EAAA;EAE3DK,IAAIA,CAACC,YAA0B,EAAE;IAC/B,MAAMC,oBAAoB,GAAG,IAAI,CAACJ,oBAAoB,CAACK,KAAK;IAC5D,IAAI,CAACL,oBAAoB,CAACM,IAAI,CAAC,CAAC,GAAGF,oBAAoB,EAAED,YAAY,CAAC,CAAC;IACvE,IAAI,CAACI,iBAAiB,CAAC,CAAC;EAC1B;EAEAC,QAAQA,CAACC,aAA6B,EAAE;IACtC,MAAML,oBAAoB,GAAG,IAAI,CAACJ,oBAAoB,CAACK,KAAK;IAC5D,IAAI,CAACL,oBAAoB,CAACM,IAAI,CAAC,CAAC,GAAGF,oBAAoB,EAAE,GAAGK,aAAa,CAAC,CAAC;IAC3E,IAAI,CAACF,iBAAiB,CAAC,CAAC;EAC1B;EAEAG,IAAIA,CAAA,EAA+B;IACjC,OAAO,IAAI,CAACV,oBAAoB,CAACW,YAAY,CAAC,CAAC;EACjD;EAEAC,WAAWA,CAAA,EAAuB;IAChC,OAAO,IAAI,CAACX,kBAAkB,CAACU,YAAY,CAAC,CAAC;EAC/C;EAEAE,aAAaA,CAAA,EAAG;IACd,MAAMC,oBAAoB,GAAG,IAAI,CAACd,oBAAoB,CAACK,KAAK,CAACU,GAAG,CAAEC,CAAC,KAAM;MAAE,GAAGA,CAAC;MAAEC,IAAI,EAAE;IAAK,CAAC,CAAC,CAAC;IAC/F,IAAI,CAACjB,oBAAoB,CAACM,IAAI,CAACQ,oBAAoB,CAAC;IACpD,IAAI,CAACP,iBAAiB,CAAC,CAAC;EAC1B;EAEAW,QAAQA,CAAA,EAAG;IACT,IAAI,CAAClB,oBAAoB,CAACM,IAAI,CAAC,EAAE,CAAC;IAClC,IAAI,CAACL,kBAAkB,CAACK,IAAI,CAAC,CAAC,CAAC;EACjC;EAEQC,iBAAiBA,CAAA,EAAG;IAC1B,MAAMK,WAAW,GAAG,IAAI,CAACZ,oBAAoB,CAACK,KAAK,CAACc,MAAM,CAACH,CAAC,IAAI,CAACA,CAAC,CAACC,IAAI,CAAC,CAACG,MAAM;IAC/E,IAAI,CAACnB,kBAAkB,CAACK,IAAI,CAACM,WAAW,CAAC;EAC3C;AACF;AAEA,eAAe,IAAId,mBAAmB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}